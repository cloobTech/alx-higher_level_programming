===============================================================================
How to use the "matrix_divided(matrix, div)" from 2-matrix_divided.py
==================================â‰ ============================================

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

case 1: divide the matrix by an integer divisor and return new matrix
>>> matrix_1 = [[3, 4, 16, 7], [66, 24, 20, 2]]
>>> print(matrix_divided(matrix_1, 4))
[[0.75, 1.0, 4.0, 1.75], [16.5, 6.0, 5.0, 0.5]]

>>> print(matrix_1)
[[3, 4, 16, 7], [66, 24, 20, 2]]

-------------------------------------------------------------------------------

case 2: when the divisor is zero(0)
>>> print(matrix_divided(matrix_1, 0))
Traceback (most recent call last):
ZeroDivisionError: division by zero

-------------------------------------------------------------------------------

case 3: if the first argument is not of (list) type
>>> print(matrix_divided(([1,2,3], [3,4,5]), 2))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

-------------------------------------------------------------------------------

case 4: when matrix == []
>>> print(matrix_divided([], 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

-------------------------------------------------------------------------------

case 5: test when an item in the array is not of (int or float)
>>> mat = [[1,2,3.0], ["alx", 2, "SE"]]
>>> print(matrix_divided(mat, 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

-------------------------------------------------------------------------------

case 6: check lenght of child list
>>> child_list = [[1,2,3], [1,4]]
>>> print(matrix_divided(child_list, 3))
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size

-------------------------------------------------------------------------------

case 7: when we use a value other than an int or float as a divisor
>>> print(matrix_divided(matrix_1,"school"))
Traceback (most recent call last):
TypeError: div must be a number

-------------------------------------------------------------------------------

case 8: when no value is passed for 'div' parameter
>>> print(matrix_divided(matrix_1))
Traceback (most recent call last):
    ...
TypeError: matrix_divided() missing 1 required positional argument: 'div'

-------------------------------------------------------------------------------
case 9: when no arguement is passed
>>> print(matrix_divided())
Traceback (most recent call last):
    ...
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
